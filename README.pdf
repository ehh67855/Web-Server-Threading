    a.Evan Hammam
    b. List what you have done and how did you test them. So that you can be sure to
    receive credit for the parts youâ€™ve done.

     In the implementation webserver.c, several components were implimented to ensure the safe handling of concurrent requests. The server uses a producer-consumer model, where the listener thread (using req_handler) listens for incoming connections and places them in a shared buffer, acting as the producer. Worker threads function as consumers, processing requests from the buffer. Testing involved using multiple concurrent client connections to ensure the server could handle simultaneous requests without crashing or producing incorrect behavior. Another test was deliberatly creating scenarios where the number of incoming connections exceeded the buffer capacity to ensure that the semaphore and mutex logic prevented buffer overflows and managed underflows correctly.

    c. Explain your design of shared data structure and synchronization (and show that
    your solution does not have any concurrency problems). Also, you need to explain how
    you tested and verified your program against race conditions and deadlocks.

        The server's design incorporates a circular buffer to manage incoming requests, with semaphores (sem_full, sem_empty) and a mutex (mutex) ensuring thread-safe operations. The sem_empty semaphore prevents buffer overflow by indicating available space, while sem_full signals the presence of requests to be processed, ensuring consumers do not attempt to process from an empty buffer. The mutex guarantees mutual exclusion during buffer access, preventing race conditions. Due to a lack of robust automated testing methods, testing included outputting the contents of the buffer at specific moments to manually inspect its contents. Additionally, the excecution time was inspected to ensure that it improved with a multithreaded excecution. When running without crash handling, the excecution time is signifigantly reduced which suggests the multithreading has excecuted properly. I have at some point encounted a situation where the program gets stuck, however due to the nondeterministic nature of threading I have not been able to reproduce the situation for debugging.